service: fda

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  iam:
    role:
      - ${file(iam.yml)}
  # environment:
  #   USERS_TABLE: ${self:custom.usersTableName}

functions:
# Auth
  verify_login_otp:
    handler: src/handlers/auth.verifyLoginOtp
    events:
      - http:
          path: verify_login_otp
          method: post
          cors: true
# Users
  getUserById:
    handler: src/handlers/users.getUserById
    events:
      - http:
          path: getUserById
          method: post
          cors: true
  createUser:
    handler: src/handlers/users.createUser
    events:
      - http:
          path: createUser
          method: post
          cors: true
  getUserByIds:
    handler: src/handlers/users.getUserByIds
    events:
      - http:
          path: getUserByIds
          method: post
          cors: true
  updateUser:
    handler: src/handlers/users.updateUser
    events:
      - http:
          path: updateUser
          method: post
          cors: true
  queryUsersByFilters:
    handler: src/handlers/users.queryUsersByFilters
    events:
      - http:
          path: queryUsersByFilters
          method: post
          cors: true
# Restaurants
  getRestaurantById:
      handler: src/handlers/restaurants-controller.getRestaurantById
      events:
        - http:
            path: getRestaurantById
            method: post
            cors: true
  getRestaurantsByIds:
    handler: src/handlers/restaurants-controller.getRestaurantsByIds
    events:
      - http:
          path: getRestaurantsByIds
          method: post
          cors: true
  getRestaurantsByName:
    handler: src/handlers/restaurants-controller.getRestaurantsByName
    events:
      - http:
          path: getRestaurantsByName
          method: post
          cors: true
# Menu Items
  getMenuItemById:
      handler: src/handlers/menu-items-controller.getMenuItemById
      events:
        - http:
            path: getMenuItemById
            method: post
            cors: true
  getMenuItemsByIds:
    handler: src/handlers/menu-items-controller.getMenuItemsByIds
    events:
      - http:
          path: getMenuItemsByIds
          method: post
          cors: true
  getMenuItemsByName:
    handler: src/handlers/menu-items-controller.getMenuItemsByName
    events:
      - http:
          path: getMenuItemsByName
          method: post
          cors: true
# Orders
  getOrderById:
      handler: src/handlers/orders-controller.getOrderById
      events:
        - http:
            path: getOrderById
            method: post
            cors: true
  getOrdersByIds:
    handler: src/handlers/orders-controller.getOrdersByIds
    events:
      - http:
          path: getOrdersByIds
          method: post
          cors: true
  getOrdersByUserId:
    handler: src/handlers/orders-controller.getOrdersByUserId
    events:
      - http:
          path: getOrdersByUserId
          method: post
          cors: true

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3002
    lambdaPort: 3003
    
  userTableName:  ${self:service}-${file(./src/constants/constants.js):USER_TABLE_NAME} 
  restaurantTableName:  ${self:service}-${file(./src/constants/constants.js):RESTAURANT_TABLE_NAME}
  menuItemTableName:  ${self:service}-${file(./src/constants/constants.js):MENU_ITEM_TABLE_NAME} 
  categoryTableName:  ${self:service}-${file(./src/constants/constants.js):CATEGORY_TABLE_NAME} 
  orderTableName:  ${self:service}-${file(./src/constants/constants.js):ORDER_TABLE_NAME} 

resources:
  - ${file(resources.yml)}
